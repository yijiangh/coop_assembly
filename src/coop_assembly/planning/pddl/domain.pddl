(define (domain construction)
  (:requirements :strips :equality)
  (:predicates
    (Robot ?r)
    (Element ?e)
    (Printed ?e)
    (Removed ?e)
    (Traj ?r ?t)
    (PrintAction ?r ?e ?q1 ?q2 ?t)
    (Collision ?t ?e)
    (Grounded ?e)
    (Order ?e1 ?e2)
    (Stiff)
    (Conf ?r ?q)
    (AtConf ?r ?q)
    (CanMove ?r)
    (UnsafeTraj ?r ?t)
    ; (Assigned ?r ?e)
  )

  ;;;; removing the element
  (:action print
    :parameters (?r ??e ?q1 ?q2 ?t)
    :precondition (and (PrintAction ?r ?e ?q1 ?q2 ?t)
                       (Printed ?e)
                       ; (Stiff)
                       ; (Assigned ?r ?e)
                       ; (AtConf ?r ?q1) ; (not (UnsafeTraj ?r ?t))
                       (forall (?e2) (imply (Order ?e ?e2) (Removed ?e2)))
                       (forall (?e2) (imply (Collision ?t ?e2) (Removed ?e2)))
                  )
    :effect (and (Removed ?e) (CanMove ?r)
                 (AtConf ?r ?q2) ; TODO: reverse?
                 (not (AtConf ?r ?q1))
                 (not (Printed ?e)))
  )

  ;(:derived (UnsafeTraj ?r ?t) (and
  ;      (Traj ?r ?t)
  ;      (exists (?r2 ?q2) (and (Conf ?r2 ?q2) (not (= ?r ?r2))
  ;                             (not (CFreeTrajConf ?r ?t ?r2 ?q2))
  ;                             (AtConf ?r2 ?q2))))
  ;)
)
