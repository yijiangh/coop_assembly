import numpy as np
import random
import math

from collections import namedtuple

# from extrusion.utils import get_disabled_collisions, get_custom_limits, MotionTrajectory

from pybullet_planning import get_movable_joints, link_from_name, set_pose, \
    multiply, invert, inverse_kinematics, plan_direct_joint_motion, Attachment, set_joint_positions, plan_joint_motion, \
    get_configuration, wait_for_interrupt, point_from_pose, HideOutput, load_pybullet, draw_pose, unit_quat, create_obj, \
    add_body_name, get_pose, pose_from_tform, connect, WorldSaver, get_sample_fn, \
    wait_for_duration, enable_gravity, enable_real_time, trajectory_controller, simulate_controller, \
    add_fixed_constraint, remove_fixed_constraint, Pose, Euler, get_collision_fn, LockRenderer, user_input, has_gui, \
    disconnect, unit_pose, Point, get_distance

from .robot_setup import EE_LINK_NAME, get_disabled_collisions, IK_MODULE
from coop_assembly.data_structure import Grasp

def get_goal_pose_gen_fn(element_from_index):
    def gen_fn(index):
        """return a world_from_goal_pose, the central point is invariant,
        just rotate around the bar's local z axis (for bars, the longitude axis)
        """
        body_pose = element_from_index[index].goal_pose.value
        # by default, the longitude axis is z
        # https://pybullet-planning.readthedocs.io/en/latest/reference/generated/pybullet_planning.interfaces.env_manager.create_cylinder.html#pybullet_planning.interfaces.env_manager.create_cylinder
        while True:
            theta = random.uniform(-np.pi, +np.pi)
            rotation = Pose(euler=Euler(yaw=theta))
            yield multiply(body_pose, rotation),
    return gen_fn


def get_bar_grasp_gen_fn(element_from_index, tool_pose=unit_pose(), reverse_grasp=False, safety_margin_length=0.0):
    # converted from https://pybullet-planning.readthedocs.io/en/latest/reference/generated/pybullet_planning.primitives.grasp_gen.get_side_cylinder_grasps.html
    # to get rid of the rotation around the local z axis

    # rotate the cylinder's frame to make x axis align with the longitude axis
    longitude_x = Pose(euler=Euler(pitch=np.pi/2))
    def gen_fn(index):
        # can get from aabb as well
        print(element_from_index[index].axis_endpoints)
        bar_length = get_distance(*element_from_index[index].axis_endpoints)
        while True:
            # translation along the longitude axis
            slide_dist = random.uniform(-bar_length/2+safety_margin_length, bar_length/2-safety_margin_length)
            translate_along_x_axis = Pose(point=Point(slide_dist,0,0))

            for j in range(1 + reverse_grasp):
                # the base pi/2 is to make y align with the longitude axis, conforming to the convention (see image in the doc)
                # flip the gripper, gripper symmetry
                rotate_around_z = Pose(euler=[0, 0, math.pi/2 + j * math.pi])

                object_from_gripper = multiply(longitude_x, translate_along_x_axis, \
                    rotate_around_z, tool_pose)
                yield invert(object_from_gripper)
    return gen_fn

# the initial pose is fixed, the goal poses can be generated by rotational symmetry
# so the total grasp posibility is generated by:
# rotational goal pose x grasp sliding
# the approach pose is independent of grasp and symmetry, can be generated independently

def get_ik_gen_fn(robot, element_from_index, obstacle_from_name, max_attempts=25):
    """return the ik generating function when placing
    # TODO: for now, we always assume the picking is collision-free

    Parameters
    ----------
    robot : [type]
        [description]
    element_from_index : [type]
        [description]
    obstacle_from_name : [type]
        [description]
    max_attempts : int, optional
        [description], by default 25

    Returns
    -------
    function handle
    """
    movable_joints = get_movable_joints(robot)
    tool_link = link_from_name(robot, EE_LINK_NAME)
    disabled_collisions = get_disabled_collisions(robot)
    # joint conf sample fn
    sample_fn = get_sample_fn(robot, movable_joints)

    approach_distance = 0.1
    #approach_distance = 0.0
    approach_vector = approach_distance*np.array([0, 0, -1])

    def gen_fn(index, pose, grasp):
        """[summary]

        Parameters
        ----------
        index : [type]
            index of the element
        pose : [type]
            world_from_object pose, can wire in a rotational sampler outside if rotational symmetry exists
        grasp : Grasp
            grasp instance

        Yields
        -------
        MotionTrajectory
            [description]
        """
        body = element_from_index[index].body
        set_pose(body, pose.value)

        obstacles = list(obstacle_from_name.values()) # + [body]
        collision_fn = get_collision_fn(robot, movable_joints, obstacles=obstacles, attachments=[],
                                        self_collisions=SELF_COLLISIONS,
                                        disabled_collisions=disabled_collisions,
                                        custom_limits=get_custom_limits(robot))
        attach_pose = multiply(pose.value, invert(grasp.attach))
        approach_pose = multiply(attach_pose, (approach_vector, unit_quat()))
        # approach_pose = multiply(pose.value, invert(grasp.approach))

        for _ in range(max_attempts):
            if IK_MODULE:
                attach_conf = sample_tool_ik(robot, attach_pose)
            else:
                set_joint_positions(robot, movable_joints, sample_fn())  # Random seed
                attach_conf = inverse_kinematics(robot, tool_link, attach_pose)

            if (attach_conf is None) or collision_fn(attach_conf):
                continue
            set_joint_positions(robot, movable_joints, attach_conf)
            #if USE_IKFAST:
            #    approach_conf = sample_tool_ik(robot, approach_pose, nearby_conf=attach_conf)
            #else:
            approach_conf = inverse_kinematics(robot, tool_link, approach_pose)
            if (approach_conf is None) or collision_fn(approach_conf):
                continue
            set_joint_positions(robot, movable_joints, approach_conf)
            path = plan_direct_joint_motion(robot, movable_joints, attach_conf,
                                            obstacles=obstacles,
                                            self_collisions=SELF_COLLISIONS,
                                            disabled_collisions=disabled_collisions)
            if path is None: # TODO: retreat
                continue
            #path = [approach_conf, attach_conf]
            attachment = Attachment(robot, tool_link, grasp.attach, body)
            traj = MotionTrajectory(robot, movable_joints, path, attachments=[attachment])
            yield approach_conf, traj
            break
    return gen_fn

